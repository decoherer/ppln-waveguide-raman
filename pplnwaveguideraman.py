
import numpy as np
from numpy import sqrt,pi,nan,inf,sign,exp,log,sin,cos,floor,ceil
from wavedata import Wave,deal,wrange
from sellmeier import index,photonpower,wavenumber2wavelength,wavelength2wavenumber,wavelength2energy

# PelcMa2011, Fig 7a green curve digitized using automeris.io/WebPlotDigitizer
# "Long-wavelength-pumped upconversion single-photon detector at 1550 nm: performance and noise analysis"
def pelcnoisevsshift(relative=False):
    ### digitized green curve
    w = Wave.fromxys([(-1.7497e+2, 2.7981e-2),(-1.7973e+2, 3.1555e-2),(-1.8390e+2, 3.5222e-2),(-1.8771e+2, 3.9150e-2),(-1.9116e+2, 4.3313e-2),(-1.9489e+2, 4.8035e-2),(-1.9855e+2, 5.2974e-2),(-2.0132e+2, 5.8931e-2),(-2.0458e+2, 6.6293e-2),(-2.0745e+2, 7.4999e-2),(-2.1122e+2, 8.4123e-2),(-2.1362e+2, 9.3297e-2),(-2.1547e+2, 1.0283e-1),(-2.1728e+2, 1.1310e-1),(-2.1958e+2, 1.2496e-1),(-2.2236e+2, 1.3995e-1),(-2.2406e+2, 1.5612e-1),(-2.2586e+2, 1.7367e-1),(-2.2814e+2, 1.9741e-1),(-2.3071e+2, 2.2528e-1),(-2.3247e+2, 2.5799e-1),(-2.3448e+2, 2.9935e-1),(-2.3670e+2, 3.4470e-1),(-2.3919e+2, 3.9618e-1),(-2.4110e+2, 4.5697e-1),(-2.4350e+2, 5.1750e-1),(-2.4595e+2, 5.8288e-1),(-2.4913e+2, 6.5609e-1),(-2.5225e+2, 7.1555e-1),(-2.6097e+2, 6.1956e-1),(-2.5901e+2, 7.0731e-1),(-2.6793e+2, 5.5292e-1),(-2.7653e+2, 5.9805e-1),(-2.7793e+2, 5.4265e-1),(-2.7999e+2, 4.7509e-1),(-2.8133e+2, 4.1762e-1),(-2.8200e+2, 3.7775e-1),(-2.8309e+2, 3.4283e-1),(-2.8423e+2, 3.0449e-1),(-2.8641e+2, 2.6648e-1),(-2.8677e+2, 2.3851e-1),(-2.8786e+2, 2.1835e-1),(-2.8939e+2, 1.9741e-1),(-2.9058e+2, 1.7825e-1),(-2.9244e+2, 1.6023e-1),(-2.9331e+2, 1.4431e-1),(-2.9563e+2, 1.2904e-1),(-2.9721e+2, 1.1428e-1),(-3.0005e+2, 9.9838e-2),(-3.0276e+2, 8.7568e-2),(-3.0574e+2, 7.7503e-2),(-3.0800e+2, 6.9732e-2),(-3.1105e+2, 6.3067e-2),(-3.1420e+2, 5.6064e-2),(-3.1731e+2, 4.9998e-2),(-3.2206e+2, 4.4927e-2),(-3.2542e+2, 4.0526e-2),(-3.2858e+2, 3.6998e-2),(-3.3329e+2, 3.3383e-2),(-3.3769e+2, 3.0235e-2),(-3.4393e+2, 2.7348e-2),(-3.4937e+2, 2.4813e-2),(-3.5536e+2, 2.2596e-2),(-3.6235e+2, 2.0532e-2),(-3.6920e+2, 1.8796e-2),(-3.7768e+2, 1.7339e-2),(-3.8965e+2, 1.6213e-2),(-4.0163e+2, 1.5268e-2),(-4.1360e+2, 1.4763e-2),(-4.2558e+2, 1.4629e-2),(-4.3755e+2, 1.4819e-2),(-4.4953e+2, 1.5331e-2),(-4.6150e+2, 1.6170e-2),(-4.7348e+2, 1.7335e-2),(-4.8496e+2, 1.8788e-2),(-4.9591e+2, 2.0298e-2),(-5.0505e+2, 2.2372e-2),(-5.1361e+2, 2.4659e-2),(-5.2138e+2, 2.7292e-2),(-5.2845e+2, 3.0103e-2),(-5.3498e+2, 3.3169e-2),(-5.4097e+2, 3.6646e-2),(-5.4641e+2, 4.0239e-2),(-5.5137e+2, 4.4264e-2),(-5.5805e+2, 4.8965e-2),(-5.6256e+2, 5.4226e-2),(-5.6623e+2, 5.9675e-2),(-5.7055e+2, 6.6087e-2),(-5.7483e+2, 7.3584e-2),(-5.7744e+2, 8.0807e-2),(-5.8136e+2, 8.9127e-2),(-5.8501e+2, 9.8601e-2),(-5.8778e+2, 1.0965e-1),(-5.9065e+2, 1.2346e-1),(-5.9471e+2, 1.3818e-1),(-5.9682e+2, 1.5351e-1),(-5.9867e+2, 1.6935e-1),(-6.0030e+2, 1.8528e-1),(-6.0322e+2, 2.0540e-1),(-6.0550e+2, 2.2997e-1),(-6.0653e+2, 2.5592e-1),(-6.0940e+2, 2.9093e-1),(-6.1197e+2, 3.3709e-1),(-6.1347e+2, 3.8263e-1),(-6.1601e+2, 4.3731e-1),(-6.1772e+2, 5.1266e-1),(-6.2019e+2, 5.9781e-1),(-6.2228e+2, 6.8923e-1),(-6.2461e+2, 7.9435e-1),(-6.2823e+2, 8.9271e-1),(-6.3226e+2, 9.6036e-1),(-6.3795e+2, 8.0459e-1),(-6.4014e+2, 7.1133e-1),(-6.3840e+2, 9.1907e-1),(-6.4185e+2, 6.3838e-1),(-6.4374e+2, 5.7362e-1),(-6.4472e+2, 5.1421e-1),(-6.4699e+2, 4.5119e-1),(-6.4825e+2, 3.9839e-1),(-6.5067e+2, 3.5159e-1),(-6.5256e+2, 3.1528e-1),(-6.5494e+2, 2.8072e-1),(-6.5765e+2, 2.4625e-1),(-6.6023e+2, 2.1796e-1),(-6.6280e+2, 1.9489e-1),(-6.6562e+2, 1.7627e-1),(-6.6812e+2, 1.6010e-1),(-6.7106e+2, 1.4379e-1),(-6.7524e+2, 1.3003e-1),(-6.7913e+2, 1.1719e-1),(-6.8239e+2, 1.0578e-1),(-6.8710e+2, 9.5589e-2),(-6.9160e+2, 8.6450e-2),(-6.9653e+2, 7.9067e-2),(-7.0144e+2, 7.1891e-2),(-7.0644e+2, 6.5095e-2),(-7.1189e+2, 5.8960e-2),(-7.1733e+2, 5.3384e-2),(-7.2277e+2, 4.8436e-2),(-7.2822e+2, 4.4166e-2),(-7.3415e+2, 4.0279e-2),(-7.3970e+2, 3.6745e-2),(-7.4618e+2, 3.3573e-2),(-7.5317e+2, 3.0602e-2),(-7.5987e+2, 2.7936e-2),(-7.6741e+2, 2.5543e-2),(-7.7517e+2, 2.3336e-2),(-7.8374e+2, 2.1345e-2),(-7.9264e+2, 1.9527e-2),(-8.0268e+2, 1.8273e-2),(-8.1422e+2, 1.7068e-2),(-8.2619e+2, 1.6293e-2),(-8.3817e+2, 1.6085e-2),(-8.5014e+2, 1.6585e-2),(-8.6212e+2, 1.7506e-2),(-8.7409e+2, 1.8002e-2),(-8.8607e+2, 1.7165e-2),(-8.9478e+2, 1.5559e-2),(-9.0325e+2, 1.4117e-2),(-9.0947e+2, 1.2829e-2),(-9.1497e+2, 1.1710e-2),(-9.2145e+2, 1.0586e-2),(-9.2798e+2, 9.5937e-3),(-9.3497e+2, 8.7036e-3),(-9.4159e+2, 7.9735e-3),(-9.4820e+2, 7.3421e-3),(-9.5589e+2, 6.7352e-3),(-9.6445e+2, 6.1764e-3),(-9.7324e+2, 5.7041e-3),(-9.8346e+2, 5.2632e-3),(-9.9602e+2, 4.8217e-3),(-1.0080e+3, 4.4136e-3),(-1.0200e+3, 4.0708e-3),(-1.0319e+3, 3.7716e-3),(-1.0439e+3, 3.5116e-3),(-1.0559e+3, 3.2831e-3),(-1.0679e+3, 3.0800e-3),(-1.0798e+3, 2.8949e-3),(-1.0918e+3, 2.7302e-3),(-1.1038e+3, 2.5788e-3),(-1.1158e+3, 2.4413e-3),(-1.1277e+3, 2.3146e-3),(-1.1397e+3, 2.1995e-3),(-1.1517e+3, 2.0933e-3),(-1.1637e+3, 1.9974e-3),(-1.1756e+3, 1.9060e-3),(-1.1876e+3, 1.8222e-3),(-1.1996e+3, 1.7427e-3),(-1.2116e+3, 1.6686e-3),(-1.2235e+3, 1.5994e-3),(-1.2355e+3, 1.5343e-3),(-1.2475e+3, 1.4735e-3),(-1.2595e+3, 1.4164e-3),(-1.2714e+3, 1.3642e-3),(-1.2834e+3, 1.3136e-3),(-1.2954e+3, 1.2668e-3),(-1.3074e+3, 1.2212e-3),(-1.3193e+3, 1.1795e-3),(-1.3313e+3, 1.1396e-3),(-1.3433e+3, 1.1011e-3),(-1.3553e+3, 1.0655e-3),(-1.3672e+3, 1.0314e-3),(-1.3792e+3, 9.9840e-4),(-1.3912e+3, 9.6684e-4),(-1.4032e+3, 9.3628e-4),(-1.4151e+3, 9.0874e-4),(-1.4271e+3, 8.8135e-4),(-1.4391e+3, 8.5639e-4),(-1.4511e+3, 8.3089e-4),(-1.4630e+3, 8.1257e-4),(-1.4707e+3, 8.0930e-4)])
    ax,ay = deal(2,[1.754e+2,2.803e-2,1.730e+2,2.630e-2,1.791e+2,3.091e-2,1.824e+2,3.357e-2,1.856e+2,3.670e-2,1.888e+2,3.987e-2,1.911e+2,4.304e-2,1.937e+2,4.623e-2,1.962e+2,4.944e-2,1.988e+2,5.360e-2,2.012e+2,5.806e-2,2.031e+2,6.299e-2,2.061e+2,6.879e-2,2.086e+2,7.565e-2,2.107e+2,8.335e-2,2.135e+2,9.148e-2,2.149e+2,9.916e-2,2.168e+2,1.062e-1,2.181e+2,1.146e-1,2.199e+2,1.240e-1,2.213e+2,1.347e-1,2.232e+2,1.459e-1,2.248e+2,1.585e-1,2.261e+2,1.732e-1,2.279e+2,1.888e-1,2.295e+2,2.081e-1,2.312e+2,2.308e-1,2.327e+2,2.562e-1,2.345e+2,2.865e-1,2.357e+2,3.198e-1,2.376e+2,3.567e-1,2.394e+2,3.977e-1,2.408e+2,4.399e-1,2.427e+2,4.848e-1,2.442e+2,5.333e-1,2.460e+2,5.833e-1,2.478e+2,6.330e-1,2.492e+2,6.842e-1,2.520e+2,7.314e-1,2.595e+2,6.622e-1,2.578e+2,7.086e-1,2.619e+2,6.055e-1,2.643e+2,5.675e-1,2.689e+2,5.499e-1,2.720e+2,5.802e-1,2.751e+2,6.187e-1,2.792e+2,5.217e-1,2.799e+2,4.777e-1,2.807e+2,4.462e-1,2.815e+2,4.171e-1,2.824e+2,3.864e-1,2.782e+2,5.787e-1,2.834e+2,3.568e-1,2.843e+2,3.275e-1,2.848e+2,3.017e-1,2.861e+2,2.805e-1,2.864e+2,2.607e-1,2.873e+2,2.435e-1,2.884e+2,2.259e-1,2.889e+2,2.099e-1,2.897e+2,1.961e-1,2.905e+2,1.834e-1,2.913e+2,1.717e-1,2.933e+2,1.571e-1,2.935e+2,1.430e-1,2.959e+2,1.329e-1,2.962e+2,1.235e-1,2.978e+2,1.143e-1,2.993e+2,1.052e-1,3.009e+2,9.594e-2,3.036e+2,8.691e-2,3.052e+2,7.906e-2,3.077e+2,7.318e-2,3.095e+2,6.747e-2,3.111e+2,6.337e-2,3.136e+2,5.954e-2,3.148e+2,5.527e-2,3.175e+2,5.119e-2,3.199e+2,4.745e-2,3.231e+2,4.421e-2,3.256e+2,4.080e-2,3.283e+2,3.813e-2,3.304e+2,3.563e-2,3.339e+2,3.321e-2,3.386e+2,3.078e-2,3.419e+2,2.835e-2,3.460e+2,2.631e-2,3.501e+2,2.447e-2,3.543e+2,2.276e-2,3.599e+2,2.144e-2,3.662e+2,1.996e-2,3.724e+2,1.848e-2,3.795e+2,1.733e-2,3.872e+2,1.625e-2,3.951e+2,1.565e-2,4.005e+2,1.504e-2,4.084e+2,1.491e-2,4.179e+2,1.470e-2,4.269e+2,1.464e-2,4.361e+2,1.475e-2,4.453e+2,1.494e-2,4.538e+2,1.536e-2,4.628e+2,1.603e-2,4.718e+2,1.692e-2,4.807e+2,1.801e-2,4.895e+2,1.938e-2,4.976e+2,2.085e-2,5.044e+2,2.245e-2,5.109e+2,2.418e-2,5.174e+2,2.610e-2,5.231e+2,2.816e-2,5.288e+2,3.007e-2,5.337e+2,3.216e-2,5.384e+2,3.465e-2,5.432e+2,3.749e-2,5.474e+2,4.049e-2,5.513e+2,4.358e-2,5.551e+2,4.705e-2,5.592e+2,5.109e-2,5.632e+2,5.485e-2,5.664e+2,5.911e-2,5.693e+2,6.377e-2,5.726e+2,6.936e-2,5.758e+2,7.525e-2,5.781e+2,8.122e-2,5.810e+2,8.672e-2,5.832e+2,9.356e-2,5.858e+2,1.012e-1,5.877e+2,1.097e-1,5.907e+2,1.192e-1,5.929e+2,1.301e-1,5.945e+2,1.406e-1,5.968e+2,1.536e-1,5.986e+2,1.677e-1,6.002e+2,1.794e-1,6.018e+2,1.932e-1,6.036e+2,2.086e-1,6.051e+2,2.271e-1,6.068e+2,2.469e-1,6.082e+2,2.718e-1,6.101e+2,2.994e-1,6.114e+2,3.307e-1,6.133e+2,3.634e-1,6.146e+2,4.027e-1,6.162e+2,4.505e-1,6.182e+2,5.066e-1,6.195e+2,5.721e-1,6.213e+2,6.351e-1,6.230e+2,7.111e-1,6.246e+2,7.905e-1,6.262e+2,8.628e-1,6.281e+2,9.310e-1,6.317e+2,9.841e-1,6.366e+2,8.795e-1,6.384e+2,8.009e-1,6.356e+2,9.368e-1,6.399e+2,7.359e-1,6.416e+2,6.741e-1,6.424e+2,6.225e-1,6.440e+2,5.766e-1,6.447e+2,5.321e-1,6.467e+2,4.857e-1,6.469e+2,4.426e-1,6.491e+2,4.035e-1,6.504e+2,3.646e-1,6.522e+2,3.299e-1,6.541e+2,3.031e-1,6.552e+2,2.781e-1,6.572e+2,2.533e-1,6.596e+2,2.301e-1,6.611e+2,2.102e-1,6.637e+2,1.944e-1,6.651e+2,1.803e-1,6.670e+2,1.680e-1,6.689e+2,1.569e-1,6.717e+2,1.449e-1,6.741e+2,1.331e-1,6.776e+2,1.242e-1,6.799e+2,1.150e-1,6.824e+2,1.070e-1,6.856e+2,9.923e-2,6.895e+2,9.244e-2,6.939e+2,8.554e-2,6.972e+2,7.897e-2,7.005e+2,7.380e-2,7.037e+2,6.905e-2,7.069e+2,6.458e-2,7.110e+2,6.004e-2,7.150e+2,5.563e-2,7.191e+2,5.167e-2,7.234e+2,4.792e-2,7.276e+2,4.464e-2,7.316e+2,4.172e-2,7.356e+2,3.908e-2,7.403e+2,3.639e-2,7.461e+2,3.376e-2,7.532e+2,3.122e-2,7.591e+2,2.877e-2,7.648e+2,2.681e-2,7.706e+2,2.506e-2,7.764e+2,2.344e-2,7.828e+2,2.193e-2,7.895e+2,2.046e-2,7.967e+2,1.914e-2,8.044e+2,1.793e-2,8.122e+2,1.718e-2,8.179e+2,1.643e-2,8.255e+2,1.623e-2,8.350e+2,1.609e-2,8.446e+2,1.617e-2,8.530e+2,1.653e-2,8.620e+2,1.725e-2,8.707e+2,1.797e-2,8.804e+2,1.764e-2,8.881e+2,1.679e-2,8.958e+2,1.574e-2,9.020e+2,1.454e-2,9.067e+2,1.329e-2,9.119e+2,1.233e-2,9.161e+2,1.147e-2,9.208e+2,1.069e-2,9.250e+2,9.928e-3,9.301e+2,9.338e-3,9.355e+2,8.743e-3,9.417e+2,8.134e-3,9.477e+2,7.537e-3,9.535e+2,7.035e-3,9.600e+2,6.574e-3,9.666e+2,6.142e-3,9.738e+2,5.749e-3,9.813e+2,5.370e-3,9.893e+2,5.034e-3,9.977e+2,4.704e-3,1.006e+3,4.490e-3,1.011e+3,4.252e-3,1.018e+3,4.116e-3,1.024e+3,3.903e-3,1.031e+3,3.794e-3,1.036e+3,3.611e-3,1.043e+3,3.507e-3,1.050e+3,3.339e-3,1.057e+3,3.248e-3,1.063e+3,3.104e-3,1.070e+3,3.021e-3,1.077e+3,2.892e-3,1.084e+3,2.816e-3,1.090e+3,2.696e-3,1.098e+3,2.631e-3,1.104e+3,2.526e-3,1.112e+3,2.458e-3,1.120e+3,2.361e-3,1.128e+3,2.294e-3,1.135e+3,2.207e-3,1.143e+3,2.141e-3,1.151e+3,2.066e-3,1.160e+3,2.002e-3,1.168e+3,1.940e-3,1.177e+3,1.880e-3,1.186e+3,1.819e-3,1.195e+3,1.750e-3,1.203e+3,1.705e-3,1.212e+3,1.649e-3,1.220e+3,1.603e-3,1.229e+3,1.554e-3,1.238e+3,1.509e-3,1.247e+3,1.463e-3,1.256e+3,1.419e-3,1.265e+3,1.380e-3,1.274e+3,1.342e-3,1.283e+3,1.307e-3,1.292e+3,1.269e-3,1.301e+3,1.239e-3,1.310e+3,1.205e-3,1.319e+3,1.170e-3,1.328e+3,1.143e-3,1.337e+3,1.118e-3,1.346e+3,1.086e-3,1.355e+3,1.060e-3,1.364e+3,1.042e-3,1.373e+3,1.011e-3,1.382e+3,9.876e-4,1.391e+3,9.656e-4,1.400e+3,9.386e-4,1.409e+3,9.193e-4,1.418e+3,9.016e-4,1.427e+3,8.763e-4,1.436e+3,8.646e-4,1.445e+3,8.422e-4,1.454e+3,8.217e-4,1.463e+3,8.148e-4,1.470e+3,8.104e-4])
    w = Wave(ay,-ax)
    w = w.removenonmonotonicx()
    ### remove a few badly digitized points
    # w.clickcoords()
    w = w.removeclosestpoints([(-635,0.937),(-257,0.71),(-278,0.578)])
    w = w(0,-940)
    ### add digitized blue curve
    bx,by = deal(2,[9.574e+2,7.550e-3,9.650e+2,7.365e-3,9.720e+2,7.127e-3,9.804e+2,7.108e-3,9.892e+2,7.038e-3,9.976e+2,7.032e-3,1.007e+3,6.947e-3,1.016e+3,6.831e-3,1.025e+3,6.763e-3,1.034e+3,6.705e-3,1.043e+3,6.587e-3,1.052e+3,6.451e-3,1.061e+3,6.297e-3,1.070e+3,6.175e-3,1.079e+3,6.071e-3,1.088e+3,5.965e-3,1.097e+3,5.898e-3,1.106e+3,5.925e-3,1.115e+3,5.889e-3,1.124e+3,5.908e-3,1.133e+3,5.906e-3,1.142e+3,5.871e-3,1.151e+3,5.833e-3,1.160e+3,5.778e-3,1.169e+3,5.700e-3,1.178e+3,5.649e-3,1.188e+3,5.626e-3,1.196e+3,5.500e-3,1.205e+3,5.477e-3,1.214e+3,5.377e-3,1.223e+3,5.324e-3,1.232e+3,5.286e-3,1.241e+3,5.279e-3,1.250e+3,5.266e-3,1.259e+3,5.304e-3,1.268e+3,5.290e-3,1.277e+3,5.313e-3,1.286e+3,5.312e-3,1.295e+3,5.287e-3,1.304e+3,5.268e-3,1.312e+3,5.302e-3,1.321e+3,5.336e-3,1.331e+3,5.302e-3,1.339e+3,5.192e-3,1.346e+3,5.005e-3,1.354e+3,4.900e-3,1.361e+3,4.722e-3,1.368e+3,4.616e-3,1.383e+3,4.377e-3,1.391e+3,4.284e-3,1.400e+3,4.240e-3,1.409e+3,4.183e-3,1.418e+3,4.147e-3,1.427e+3,4.143e-3,1.436e+3,4.113e-3,1.445e+3,4.110e-3,1.454e+3,4.084e-3,1.463e+3,4.073e-3,1.472e+3,4.063e-3,1.481e+3,4.028e-3,1.490e+3,4.010e-3,1.499e+3,3.956e-3,1.508e+3,3.900e-3,1.517e+3,3.867e-3,1.526e+3,3.817e-3,1.535e+3,3.805e-3,1.544e+3,3.728e-3,1.553e+3,3.724e-3,1.561e+3,3.702e-3,1.567e+3,3.588e-3,1.575e+3,3.572e-3,1.584e+3,3.530e-3,1.593e+3,3.489e-3,1.602e+3,3.463e-3,1.612e+3,3.457e-3,1.620e+3,3.414e-3,1.629e+3,3.374e-3,1.639e+3,3.351e-3,1.647e+3,3.335e-3,1.656e+3,3.316e-3,1.665e+3,3.298e-3,1.674e+3,3.268e-3,1.683e+3,3.272e-3,1.692e+3,3.262e-3,1.701e+3,3.263e-3,1.710e+3,3.299e-3,1.719e+3,3.371e-3,1.728e+3,3.428e-3,1.734e+3,3.478e-3])
    ww = Wave(by,-bx)
    # w.plot(xlim=(0,-1600),log=1,c='g',x='frequency shift (1/cm)',y='intensity',save='PelcMa2011 Fig 7a green curve')
    # Wave.plots(w.setplot(c='g'),ww.setplot(c='b'),m=1,log=1,xlim=(0,-1800),x='frequency shift (1/cm)',y='intensity',save='PelcMa2011 Fig 7a reproduction')
    if not relative:
        c = 2e4/150/20/w(-900) # noise counts Hz per mW pump per 20nm bandwidth assuming 1810nm pump (20kHz at -900cm⁻¹ shift) # print(w(-900)) # 0.0149 # 133.33 Hz/mW
        # w,ww = c*w,c*ww # print(w(-900)) # 6.667 Hz/mW/nm
        w,ww = c*w,c*ww # print(w(-900))
    w = Wave(list(w.y)+list(ww.y),list(w.x)+list(ww.x)).sort().reverse()
    ### extrapolate to zero frequency with log-quadratic
    (x0,x1),(y0,y1) = w.x[0:2],np.log(w.y[0:2])
    # y = ax²-c # y'(x₀) = 2ax₀ = (np.log(w1)-np.log(w0))/(x1-x0) # y(x₀) = ax₀²-c = y₀ # c = ax₀²-y₀
    a = 0.5/x0 * (y1-y0)/(x1-x0)
    c = a*x0**2 - y0
    xs = np.linspace(0,x0,int(abs(x0)))
    wf = Wave(np.exp(a*xs**2-c),xs)
    w = Wave(list(w.y)+list(wf.y),list(w.x)+list(wf.x)).sort()
    # return w
    we0 = np.log(w(-inf,-1000))
    we1 = we0.linefit(x0=-3000,x1=-1000,coef=0).upsample(1001)(-inf,-1600)
    def ease(x,x0,x1,y0,y1):
        alpha = np.where(x<x0,0,np.where(x<x1,(x-x0)/(x1-x0),1))
        return np.where(y1,(1-alpha)*y0 + alpha*y1,y0)
    we = Wave.fromxys([(x,ease(x,-1700,-1600,we1(x),we0(x,extrapolate='const'))) for x,y in we1.xys()])
    # Wave.plots(we0,we1,we)
    # Wave.plots(w,np.exp(we1),np.exp(we),log=1)
    # Wave.plots(w(-1600+1,inf),np.exp(we),log=1,m=1)
    return Wave.fromxys(np.exp(we).xys()+w(-1600+1,inf).xys())
def pelcmaraman(λp,relative=False,temp=None,ghz=False,plot=False,ylim=(None,None),**plotargs):
    temp = temp if temp is not None else 100 if plot else 20
    w = pelcnoisevsshift(relative=relative)
    λref = wavenumber2wavelength(wavelength2wavenumber(λp)+900) # reference λ for absolute noise counts for 20°C anti-stokes
    Lref = 5.2 # cm length in PelcMa2011
    u = Wave(w.y,wavenumber2wavelength(wavelength2wavenumber(λp)-w.x))
    uu = Wave(w.y,wavenumber2wavelength(wavelength2wavenumber(λp)+w.x))
    def scaling(λ,temp=20):
        kB = 1/11604.51812 # eV/K
        ΔE = wavelength2energy(λ)-wavelength2energy(λp)
        c0 = λp*index(λp,'ln') # λp scaling from Eq 5
        c1 = np.where(ΔE<0,λ**3/λp**3,λ**3/λp**3*np.exp(-ΔE/kB/(temp+273.15))) # temperature scaling from Eq 4 or 5
        return c0*c1
    vs = (uu*scaling(uu.x)/scaling(λref)/Lref).rename('Stokes 20°C')
    va20 = (u*scaling(u.x)/scaling(λref)/Lref).rename('anti-Stokes 20°C')
    va = (u*scaling(u.x,temp=temp)/scaling(λref)/Lref).rename(f'anti-Stokes {temp}°C')
    if ghz:
        def inghz(v):
            return Wave(v.y/(299792458/v.x**2),v.x,v.name)
        vs,va20,va = inghz(vs),inghz(va20),inghz(va)
    if plot:
        xlim = (va20.x[0],2500)
        xlim = (1300,1600)
        Wave.plots(1*vs,1*va20,1*va,x='λ (nm)',y=f"noise counts (Hz/mW/{'GHz' if ghz else 'nm'}/cm)",lw=1,lines=[λp],grid=1,log=1,seed=1,ylim=ylim,**plotargs,save=f'predicted raman spectrum for {λp}nm pump - log')
        Wave.plots(1*vs,1*va20,1*va,x='λ (nm)',y=f"noise counts (Hz/mW/{'GHz' if ghz else 'nm'}/cm)",lw=1,lines=[λp],grid=1,log=0,seed=1,ylim='f',**plotargs,save=f'predicted raman spectrum for {λp}nm pump')
    return Wave(list(va.y)+list(vs.y),list(va.x)+list(vs.x)).sort()
def telcomnoise(λ3=737,P=100,L=5,ghzbw=12,plot=True): # plot of noise for 5cm,100mw, 12Ghz  from 1530 to 1565nm
    λ1s = wrange(1530,1565,0.2)
    λ2s = [1/(1/λ3-1/λ1) for λ1 in λ1s]
    w = P*L*ghzbw*Wave([pelcmaraman(λ2,plot=0,ghz=True)(λ1) for λ1,λ2 in zip(λ1s,λ2s)],λ1s)
    Wave.plots(      w,x='λ (nm)',y='noise rate (Hz) ',grid=1,log=1,ylim=(1e4,1e6),save=f"noise vs λout, {λ3}λin {P}mWpump {L}cm {ghzbw}GHzbw - log",show=plot)
    Wave.plots(0.001*w,x='λ (nm)',y='noise rate (kHz)',grid=1,log=0,ylim=(0,None),save=f"noise vs λout, {λ3}λin {P}mWpump {L}cm {ghzbw}GHzbw",show=plot)
    return w
def telcompump(λ0=737,plot=True):
    λps = np.linspace(1500,1600,501)
    λs = 1/(1/λ0-1/λps)
    w = pelcmaraman(1550,plot=0,ghz=1)
    print(w(1/(1/λ0-1/1550)), 1/(1/λ0-1/1550))
    def inputnoise(λp): # noise at input λ for 737nm output λ
        λ = 1/(1/λ0-1/λp)
        w = pelcmaraman(λp,ghz=1)
        return w(λ),λ
    rs,λs = zip(*[inputnoise(λp) for λp in λps])
    v = Wave(λs,λps)
    v.plot(x='λpump (nm)',y='λinput (nm)',grid=1,xlim='f',save='λinput vs λpump for 737nm λoutput in lithium niobate',show=plot)
    u = Wave(rs,λps)
    u.plot(x='λpump (nm)',y='noise counts at λinput (Hz/mW/GHz/cm)',c='1',grid=1,xlim='f',save='noise at λinput vs λpump for 737nm λoutput in lithium niobate',show=plot)
    return u,v
def telcomnoisecompare(λ0=737):
    u,v = telcompump(λ0=λ0,plot=0)
    u = 100*12*5*u.setplot(c='#007700')
    w = telcomnoise(λ3=λ0,P=100,L=5,ghzbw=12,plot=0).setplot(c='#000077')
    plt = Wave.plots(w,u,getplt=1,show=0,x='λ (nm)',y='noise rate (Hz)',log=1,grid=1,xlim=(1530,1565),ylim=(1e2,1e6),fewerticks=1)
    def old2new(x): return 1/(1/λ0-1/x)
    def new2old(x): return 1/(1/λ0-1/x)
    ax2 = plt.gca().secondary_xaxis('top', functions=(old2new, new2old))
    ax2.set_xlabel('λ (nm)')
    ax2.tick_params(axis='x', colors='#007700'); ax2.spines['top'].set_color('#007700'); ax2.xaxis.label.set_color('#007700')
    plt.savefig('figs/out.png', bbox_inches='tight',dpi=300)
    plt.show()


if __name__ == '__main__':
    # pelcnoisevsshift().plot(log=1)
    # pelcmaraman(1550)
    # pelcmaraman(1600)
    # v = pelcmaraman(1810)
    # print(v(1560),v(2000))
    # v = pelcmaraman(1400)
    # print(v(1300),v(1560))
    # pelcmaraman(1400,plot=True,ghz=True,xlim=(1300,1600),ylim='f')
    # pelcmaraman(1810,plot=True,ghz=True,xlim=(1300,1600),ylim='f')
    # print(photonpower(1810),'nW/GHz')
    # w = pelcmaraman(1405,plot=0,ghz=True); print(w(1550))
    # telcomnoise() 
    # pelcmaraman(1480,plot=True,ghz=False,xlim=(1300,1800),ylim=(0.1,None))
    # pelcmaraman(1480,plot=True,ghz=True,xlim=(1300,1800),ylim=(0.01,123))
    # pelcmaraman(1405,plot=True,ghz=True,xlim=(1200,1700),ylim=(0.01,106))
    # pelcmaraman(1550,plot=True,ghz=True,xlim=(1300,1800),ylim=(0.001,140))
    # telcompump(λ0=737)
    # telcomnoisecompare()
    # pelcmaraman(1064,plot=True,ghz=0,xlim=(800,1500),ylim=(1e-3,1.15e4))
    pelcmaraman(1400,plot=True,ghz=True,xlim=(1200,1700),ylim=(0.001,106))
